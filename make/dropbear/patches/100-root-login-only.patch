--- runopts.h
+++ runopts.h
@@ -101,6 +101,10 @@
 	gid_t restrict_group_gid;
 #endif
 
+	/* FRITZ!box */
+	int rootonlylogin;
+	int useronlylogin;
+
 	int noauthpass;
 	int norootpass;
 	int allowblankpass;
--- svr-runopts.c
+++ svr-runopts.c
@@ -70,6 +70,8 @@
 					"-m		Don't display the motd on login\n"
 #endif
 					"-w		Disallow root logins\n"
+					"-0		Allow only root logins\n"
+					"-U <user_id>	Allow login only from user with id\n"
 #ifdef HAVE_GETGROUPLIST
 					"-G		Restrict logins to members of specified group\n"
 #endif
@@ -118,3 +120,4 @@
 	char* recv_window_arg = NULL;
 	char* keepalive_arg = NULL;
+	char* user_id_arg = NULL;
 	char* idle_timeout_arg = NULL;
@@ -137,5 +138,8 @@
+	svr_opts.forced_command = NULL;
 	svr_opts.forkbg = 1;
 	svr_opts.norootlogin = 0;
+	svr_opts.rootonlylogin = 0;
+	svr_opts.useronlylogin = 0;
 #ifdef HAVE_GETGROUPLIST
 	svr_opts.restrict_group = NULL;
 	svr_opts.restrict_group_gid = 0;
@@ -239,6 +241,12 @@
 				case 'w':
 					svr_opts.norootlogin = 1;
 					break;
+				case '0':
+					svr_opts.rootonlylogin = 1;
+					break;
+				case 'U':
+					next = &user_id_arg;
+					break;
 #ifdef HAVE_GETGROUPLIST
 				case 'G':
 					next = &svr_opts.restrict_group;
--- svr-runopts.c
+++ svr-runopts.c
@@ -344,5 +354,13 @@
 		opts.keepalive_secs = val;
 	}
 
+	if (user_id_arg) {
+		unsigned int val;
+		if (m_str_to_uint(user_id_arg, &val) == DROPBEAR_FAILURE) {
+			dropbear_exit("Bad user_id_arg '%s'", user_id_arg);
+		}
+		svr_opts.useronlylogin = val;
+	}
+
 	if (idle_timeout_arg) {
 		unsigned int val;
--- svr-auth.c
+++ svr-auth.c
@@ -314,6 +314,21 @@
 	}
 #endif HAVE_GETGROUPLIST
 
+	/* FRITZBOX PATCH: only allow root user */
+	if (svr_opts.rootonlylogin && ses.authstate.pw_uid != 0) {
+		TRACE(("leave checkusername: non-root login disabled"))
+		dropbear_log(LOG_WARNING, "non-root login rejected");
+		send_msg_userauth_failure(0, 1);
+		return DROPBEAR_FAILURE;
+	}
+
+	if (svr_opts.useronlylogin && ses.authstate.pw_uid != svr_opts.useronlylogin) {
+		TRACE(("leave checkusername: only user login enabled"))
+		dropbear_log(LOG_WARNING, "wrong user login rejected");
+		send_msg_userauth_failure(0, 1);
+		return DROPBEAR_FAILURE;
+	}
+
 	TRACE(("shell is %s", ses.authstate.pw_shell))
 
 	/* check that the shell is set */
